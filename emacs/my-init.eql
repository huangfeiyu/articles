(tool-bar-mode -1)
(menu-bar-mode -1)
;; (cua-mode 1)
;; (global-set-key (kbd "C-x v") nil)
(global-set-key (kbd "C-x C-s") nil)
;; (global-set-key (kbd "C-n") nil)
(global-set-key (kbd "C-S-p") 'save-buffer)
;; (global-set-key (kbd "C-p") nil)
(global-set-key (kbd "C-S-R") 'isearch-forward)
(define-key isearch-mode-map (kbd "C-S-R") 'isearch-repeat-forward)
(global-set-key [home] 'back-to-indentation)

(defun new-blank-line()
  (interactive)
  "Create a new empty line in the next line."
  (move-end-of-line nil)
  (newline-and-indent))

(defun project-kill-other-buffers (&optional no-confirm)
  (interactive)
  (let* ((pr (project-current t))
         (bufs1 (project--buffers-to-kill pr))
         (bufs (remove (current-buffer) bufs1)))
    (cond (no-confirm
           (mapc #'kill-buffer bufs))
          ((null bufs)
           (message "No buffers to kill"))
          ((yes-or-no-p (format "Kill %d buffers in %s? "
                                (length bufs)
                                (project-root pr)))
           (mapc #'kill-buffer bufs)))))
(defun kill-other-buffers ()
  "Kill all buffers but the current one.
Doesn't mess with special buffers."
  (interactive)
  (when (y-or-n-p "Are you sure you want to kill all buffers but the current one? ")
    (seq-each
     #'kill-buffer
     (delete (current-buffer) (seq-filter #'buffer-file-name (buffer-list))))))
(defun move-line-up ()
  "Move up the current line."
  (interactive)
  (transpose-lines 1)
  (forward-line -2)
  (indent-according-to-mode))

(defun move-line-down ()
  "Move down the current line."
  (interactive)
  (forward-line 1)
  (transpose-lines 1)
  (forward-line -1)
  (indent-according-to-mode))


(global-set-key (kbd "C-x p k") 'project-kill-other-buffers)
(global-set-key (kbd "s-k") 'kill-other-buffers)
(global-set-key (kbd "<M-down>") 'move-line-down)
(global-set-key (kbd "<M-up>") 'move-line-up)

(global-set-key (kbd "<C-return>") 'new-blank-line)
(global-set-key (kbd "<S-return>") 'eval-last-sexp)
;; (setq debug-on-message ".*Error in post-command-hook.*")
(require 'package)
;; (setq package-archives '(
;;                          ("gnu"   . "https://elpa.gnu.org/packages/")
;;                          ("melpa" . "https://melpa.org/packages/")
;;                          ;; ("gnu" . "http://elpa.emacs-china.org/gnu/")
;;                          ;; ("melpa" . "http://elpa.emacs-china.org/melpa/")
;;                          ))
(package-initialize)
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(company-dabbrev-downcase nil)
 '(company-dabbrev-ignore-case t)
 '(context-menu-mode t)
 '(create-lockfiles nil)
 '(cua-mode t)
 '(custom-enabled-themes '(leuven-dark))
 '(custom-safe-themes
   '("7d04630548e41fc6395458b6bc0af06853b019e89169bca9f2461f74098d75de" "9013233028d9798f901e5e8efb31841c24c12444d3b6e92580080505d56fd392" "88f7ee5594021c60a4a6a1c275614103de8c1435d6d08cc58882f920e0cec65e" "8c7e832be864674c220f9a9361c851917a93f921fedb7717b1b5ece47690c098" "944d52450c57b7cbba08f9b3d08095eb7a5541b0ecfb3a0a9ecd4a18f3c28948" "aec7b55f2a13307a55517fdf08438863d694550565dee23181d2ebd973ebd6b8" "2dd4951e967990396142ec54d376cced3f135810b2b69920e77103e0bcedfba9" "be84a2e5c70f991051d4aaf0f049fa11c172e5d784727e0b525565bb1533ec78" "22ce392ec78cd5e512169f8960edf5cbbad70e01d3ed0284ea62ab813d4ff250" "b0e446b48d03c5053af28908168262c3e5335dcad3317215d9fdeb8bac5bacf9" "e19ac4ef0f028f503b1ccafa7c337021834ce0d1a2bca03fcebc1ef635776bea" "0466adb5554ea3055d0353d363832446cd8be7b799c39839f387abb631ea0995" default))
 '(dap-java-default-debug-port 11550)
 '(dired-dwim-target t)
 '(dumb-jump-ignore-context t)
 '(ediff-diff-options "-w")
 '(ediff-diff-program "diff")
 '(ediff-show-ancestor t)
 '(ediff-split-window-function 'split-window-horizontally)
 '(ediff-window-setup-function 'ediff-setup-windows-plain)
 '(ejc-candidates-uppercase t)
 '(ejc-show-result-bottom t)
 '(eww-search-prefix "https://cn.bing.com/search?q=")
 '(fill-column 200)
 '(global-tab-line-mode nil)
 '(helm-completion-style 'helm)
 '(indent-tabs-mode nil)
 '(lsp-file-watch-threshold 40000)
 '(lsp-java-jdt-ls-prefer-native-command t)
 '(lsp-modeline-code-actions-enable nil)
 '(lsp-modeline-diagnostics-enable nil)
 '(lsp-ui-sideline-enable nil)
 '(lsp-ui-sideline-show-code-actions nil)
 '(lsp-warn-no-matched-clients nil)
 '(magit-diff-use-overlays nil)
 '(make-backup-files nil)
 '(nrepl-sync-request-timeout 60)
 '(org-hide-emphasis-markers t)
 '(org-startup-indented t)
 '(org-table-convert-region-max-lines 9999999)
 '(organic-green-version 2)
 '(package-selected-packages
   '(eldoc-box eglot organic-green-theme treesit-auto dape ejira lsp-pyright elpy js2-mode yasnippet-snippets vdiff-magit rg flycheck eldoc popup clojure-mode helm-core cider avy async magit helm-lsp dap-mode gnu-elpa-keyring-update ejc-company ejc-sql lua-mode lsp-java lsp-ui lsp-mode nov ereader ox-epub helm-xref helm-ag helm hydra lsp-ivy ivy dumb-jump zenburn-theme yasnippet which-key web-mode spacemacs-theme pdf-tools org-superstar flow-minor-mode expand-region doom-themes company atom-one-dark-theme))
 '(read-buffer-completion-ignore-case t)
 '(read-extended-command-predicate 'command-completion-default-include-p)
 '(require-final-newline nil)
 '(scroll-preserve-screen-position nil)
 '(shr-inhibit-images t)
 '(url-proxy-services '(("https" . "192.168.100.39:16823")))
 '(warning-suppress-log-types '((emacs)))
 '(web-mode-code-indent-offset 2)
 '(web-mode-enable-auto-expanding t)
 '(web-mode-enable-auto-indentation nil)
 '(web-mode-enable-control-block-indentation nil)
 '(web-mode-markup-indent-offset 2))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(eglot-highlight-symbol-face ((t (:inherit bold)))))
;; load notes
;; (let ((filename "~/.notes.org"))
;;   (when (file-exists-p filename)
;;     (setq initial-buffer-choice filename)))
;; lsp-java configuration start
(setenv "MAVEN_HOME"  "/usr/share/maven")
(setenv "LSP_USE_PLISTS"  "true")

(defun lsp-booster--advice-json-parse (old-fn &rest args)
  "Try to parse bytecode instead of json."
  (or
   (when (equal (following-char) ?#)
     (let ((bytecode (read (current-buffer))))
       (when (byte-code-function-p bytecode)
         (funcall bytecode))))
   (apply old-fn args)))
(advice-add (if (progn (require 'json)
                       (fboundp 'json-parse-buffer))
                'json-parse-buffer
              'json-read)
            :around
            #'lsp-booster--advice-json-parse)

(defun lsp-booster--advice-final-command (old-fn cmd &optional test?)
  "Prepend emacs-lsp-booster command to lsp CMD."
  (let ((orig-result (funcall old-fn cmd test?)))
    (if (and (not test?)                             ;; for check lsp-server-present?
             (not (file-remote-p default-directory)) ;; see lsp-resolve-final-command, it would add extra shell wrapper
             lsp-use-plists
             (not (functionp 'json-rpc-connection))  ;; native json-rpc
             (executable-find "emacs-lsp-booster"))
        (progn
          (message "Using emacs-lsp-booster for %s!" orig-result)
          (cons "emacs-lsp-booster" orig-result))
      orig-result)))
;; (advice-add 'lsp-resolve-final-command :around #'lsp-booster--advice-final-command)

(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
(setq use-package-always-ensure t)
;; (use-package projectile)
(use-package flycheck)
(use-package yasnippet :config (yas-global-mode))
(use-package lsp-mode
  :hook (
         (lsp-mode . lsp-enable-which-key-integration)
         ;; (web-mode . lsp-deferred)
         ;; (java-mode . lsp-deferred)
         (typescript-mode . lsp-deferred)
         (js2-mode . lsp-deferred)
         ;; (js-ts-mode . lsp-deferred)
         (lua-mode . lsp-deferred)
         )
  :commands (lsp lsp-deferred)
  )
(use-package lsp-pyright
  :ensure t
  :hook (python-mode . (lambda ()
                         (require 'lsp-pyright)
                         (lsp-deferred))))  ; or lsp-deferred
(use-package hydra)
(use-package company)
(add-hook 'after-init-hook 'global-company-mode)
(use-package lsp-ui)
(use-package which-key :config (which-key-mode))
(use-package lsp-java)
;; (use-package lsp-java)
(use-package dap-mode :after lsp-mode :config (dap-auto-configure-mode))
(use-package dap-java :ensure nil)
(use-package lsp-treemacs)

;; customization
(with-eval-after-load 'lsp-mode
  ;; don't scan 3rd party javascript libraries
  (push "[/\\\\][^/\\\\]*\\.\\(json\\|html\\|jade\\)$" lsp-file-watch-ignored) ; json
  (push "/target/.*" lsp-file-watch-ignored) ; target
  (push "/node/.*" lsp-file-watch-ignored) ; node
  (push "/node_modules/.*" lsp-file-watch-ignored) ; node
  (push ".*/vendors/.*" lsp-file-watch-ignored) ; node
  (push ".*\\.min\\.js$" lsp-file-watch-ignored) ; node
  (push ".*/main/webpack/.*" lsp-file-watch-ignored) ; node webpack
  )
(setq lsp-java-java-path "/usr/bin/java")
(setq lsp-java-configuration-runtimes '[(:name "JavaSE-11" :path "/usr/local/jdk-11.0.21+9" :default t)
                                        (:name "JavaSE-17" :path "/usr/lib/jvm/java-17-openjdk-amd64")
					])
;; current VSCode defaults
(setq lsp-java-vmargs '("-noverify" "-XX:+UseStringDeduplication" "-Xmx3G" "-Xms100m" "-javaagent:/home/huang/.m2/repository/org/projectlombok/lombok/1.18.22/lombok-1.18.22.jar"))
(setq lsp-java-autobuild-enabled nil)
(setq gc-cons-threshold 80000000)
(setq read-process-output-max (* 3072 2048)) ;; 3mb
(setq lsp-idle-delay 0.500)
;; (add-hook 'dap-stopped-hook (lambda (arg) (call-interactively #'dap-hydra)))
(add-hook 'dap-mode-hook (lambda () (local-set-key (kbd "M-i") 'dap-step-in)))
(add-hook 'dap-mode-hook (lambda () (local-set-key (kbd "M-o") 'dap-step-out)))
(add-hook 'dap-mode-hook (lambda () (local-set-key (kbd "M-c") 'dap-continue)))
(add-hook 'dap-mode-hook (lambda () (local-set-key (kbd "M-n") 'dap-next)))
;; (add-hook 'java-mode-hook (lambda () (local-unset-key (kbd "M-n"))))
(add-hook 'dap-mode-hook (lambda () (local-set-key (kbd "M-q") 'dap-disconnect)))
;; (add-hook 'java-mode-hook (lambda () (local-set-key (kbd "<M-return>") 'lsp-execute-code-action)))
;; (add-hook 'java-mode-hook (lambda () (local-set-key (kbd "M--") 'lsp-ui-find-next-reference)))
;; (add-hook 'java-mode-hook (lambda () (local-set-key (kbd "M-+") 'lsp-ui-find-prev-reference)))
(add-hook 'dap-mode-hook (lambda () (local-set-key (kbd "<f6>") 'dap-tooltip-at-point)))
(dap-register-debug-template
  "Java Attach"
  (list :name "Java Attach"
        :type "java"
        :request "attach"
        :hostName "localhost"
        :projectName "jdt.ls-java-project"
        :port 11550))
;; lsp-java configuration end
(use-package markdown-mode
  :ensure t
  :mode ("README\\.md\\'" . gfm-mode)
  :init (setq markdown-command "multimarkdown"))
(use-package org-superstar)
(use-package avy)
;; (setq tramp-default-method "ssh")
;; (add-to-list 'tramp-remote-path 'tramp-own-remote-path)

(setq-default tab-width 4)
(global-set-key [remap dabbrev-expand] 'hippie-expand)
(global-set-key (kbd "C-x g") 'magit-status)
(global-set-key (kbd "C-c g") 'magit-file-dispatch)
(global-set-key (kbd "C-o") 'project-find-file)
(global-set-key (kbd "C-j") 'avy-goto-word-1)
(global-set-key (kbd "C-S-v") 'scroll-down-command)
(global-set-key (kbd "C-S-c") 'scroll-up-command)
(global-set-key (kbd "<f5>") 'revert-buffer)
;; (global-set-key (kbd "C-M-i") 'company-complete)

(use-package web-mode)
(add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.tpl\\.php\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.[agj]sp\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.djhtml\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.jspf\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.tag\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.xhtml\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.html\\'" . web-mode))
(setq web-mode-engines-alist
      '(("jsp"    . "\\.jspf\\'"))
      )
(add-hook 'web-mode-hook (lambda () (web-mode-toggle-current-element-highlight)))
(add-hook 'web-mode-hook (lambda () (local-set-key (kbd "C-M-e") 'web-mode-element-end )))
(add-hook 'web-mode-hook (lambda () (local-set-key (kbd "C-M-a") 'web-mode-element-beginning )))
(add-hook 'web-mode-hook (lambda () (local-set-key (kbd "C-c e s") 'web-mode-element-select )))
(add-hook 'web-mode-hook (lambda () (local-set-key (kbd "C-c e a") 'web-mode-element-content-select )))
(add-hook 'web-mode-hook (lambda () (local-set-key (kbd "C-M-u") 'web-mode-element-parent )))
(add-hook 'web-mode-hook (lambda () (local-set-key (kbd "C-M-d") 'web-mode-element-child )))
(add-hook 'web-mode-hook (lambda () (local-set-key (kbd "C-M-p") 'web-mode-element-previous )))
(add-hook 'web-mode-hook (lambda () (local-set-key (kbd "C-M-n") 'web-mode-element-next )))

(show-paren-mode 1)
(electric-pair-mode 1)

(global-set-key (kbd "S-C-<left>") 'shrink-window-horizontally)
    (global-set-key (kbd "S-C-<right>") 'enlarge-window-horizontally)
    (global-set-key (kbd "S-C-<down>") 'shrink-window)
    (global-set-key (kbd "S-C-<up>") 'enlarge-window)

(desktop-save-mode 1)
(setq shr-inhibit-images t)
(global-set-key (kbd "C-c l") 'org-store-link)
(global-set-key (kbd "C-c a") 'org-agenda)
(global-set-key (kbd "C-c c") 'org-capture)
(setq org-todo-keywords
            '((sequence "TODO" "DOING" "|" "DONE" "DELEGATED")))
(setq org-log-done 'time)
(setq org-todo-keyword-faces
      '(("DOING" . "green")))
(setq-default cursor-type 'bar)

;; tabnine setting
;; (use-package company-tabnine :ensure t)
;; (add-to-list 'company-backends #'company-tabnine)
;; Trigger completion immediately.
;; (setq company-idle-delay 0)
;; end tabnine setting.

(use-package expand-region)
(use-package pdf-tools)
(use-package doom-themes)
(use-package lua-mode)
(use-package nov)
(use-package js2-mode)
(add-to-list 'auto-mode-alist '("\\.epub\\'" . nov-mode))
(global-set-key (kbd "C-=") 'er/expand-region)

(global-set-key (kbd "s-j j") 'dap-debug)
(global-set-key (kbd "s-j l") 'dap-debug-last)
(global-set-key (kbd "s-j h") 'dap-hydra)
(global-set-key (kbd "C-x C-b") 'ibuffer)
(global-unset-key (kbd "C-x c"))
(put 'downcase-region 'disabled nil)
(put 'upcase-region 'disabled nil)

(add-hook 'java-ts-mode-hook 'display-line-numbers-mode)
(add-hook 'web-mode-hook 'display-line-numbers-mode)
(add-hook 'lua-mode-hook 'display-line-numbers-mode)
(add-hook 'lua-mode-hook (lambda () (local-set-key (kbd "<M-->") 'lsp-ui-find-next-reference)))
(add-hook 'lua-mode-hook (lambda () (local-set-key (kbd "M-+") 'lsp-ui-find-prev-reference)))
(add-hook 'lua-mode-hook (lambda () (local-set-key (kbd "C-M-=") 'lua-goto-matching-block)))
(add-hook 'org-mode-hook (lambda () (visual-line-mode 1)))
(add-hook 'org-mode-hook (lambda () (org-superstar-mode 1)))

(add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))
(add-hook 'js2-mode-hook (lambda () (local-set-key (kbd "M--") 'lsp-ui-find-next-reference)))
(add-hook 'js2-mode-hook (lambda () (local-set-key (kbd "M-+") 'lsp-ui-find-prev-reference)))
(add-hook 'typescript-mode-hook (lambda () (local-set-key (kbd "M--") 'lsp-ui-find-next-reference)))
(add-hook 'typescript-mode-hook (lambda () (local-set-key (kbd "M-+") 'lsp-ui-find-prev-reference)))
(pdf-loader-install)

(use-package treesit-auto
  :config
  (global-treesit-auto-mode))
(use-package ejc-sql)
(setq clomacs-httpd-default-port 8090)
(require 'ejc-company)
(push 'ejc-company-backend company-backends)
(add-hook 'ejc-sql-minor-mode-hook
          (lambda ()
            (company-mode t)))
(setq ejc-completion-system 'standard)
(add-hook 'ejc-sql-minor-mode-hook
          (lambda ()
            (ejc-eldoc-setup)))
(add-hook 'ejc-sql-connected-hook
          (lambda ()
            (ejc-set-fetch-size 200)
            (ejc-set-max-rows 200)
            (ejc-set-show-too-many-rows-message t)
            (ejc-set-column-width-limit 34)
            (ejc-set-use-unicode t)))
(add-hook 'ejc-sql-minor-mode-hook (lambda () (local-set-key (kbd "C-M-n") 'ejc-show-next-result )))
(add-hook 'ejc-sql-minor-mode-hook (lambda () (local-set-key (kbd "C-M-p") 'ejc-show-prev-result )))
(add-hook 'ejc-sql-minor-mode-hook (lambda () (local-set-key (kbd "C-q") 'ejc-quit-connection )))
(add-hook 'ejc-result-mode-hook (lambda () (local-set-key (kbd "C-M-n") 'ejc-show-next-result )))
(add-hook 'ejc-result-mode-hook (lambda () (local-set-key (kbd "C-M-p") 'ejc-show-prev-result )))
(ejc-create-connection
 "chengdu"
 :classpath "[/home/huang/.m2/repository/com/oracle/jdbc/ojdbc8/12.2.0.1/ojdbc8-12.2.0.1.jar]"
 :password "Cintra$2024"
 :user "etix_app"
 :port "1521"
 :host "192.168.100.10"
 :dbname "chn"
 :dbtype "oracle:sid"
 :separator ";")

(ejc-create-connection
 "aws-db1"
 :classpath "[/home/huang/.m2/repository/com/oracle/jdbc/ojdbc8/12.2.0.1/ojdbc8-12.2.0.1.jar]"
 :password "Cintra$2024"
 :user "etix_dml"
 :port "1521"
 :host "10.10.1.100"
 :dbname "AWS_TEST_1"
 :dbtype "oracle:sid"
 :separator ";")

(ejc-create-connection
 "aws-db1-kk"
 :classpath "[/home/huang/.m2/repository/com/oracle/jdbc/ojdbc8/12.2.0.1/ojdbc8-12.2.0.1.jar]"
 :password "Cintra$2024"
 :user "kk_app"
 :port "1521"
 :host "10.10.1.100"
 :dbname "AWS_TEST_1"
 :dbtype "oracle:sid"
 :separator ";")

(ejc-create-connection
 "aws-db2"
 :classpath "[/home/huang/.m2/repository/com/oracle/jdbc/ojdbc8/12.2.0.1/ojdbc8-12.2.0.1.jar]"
 :password "Cintra$2024"
 :user "etix_dml"
 :port "1521"
 :host "10.10.1.101"
 :dbname "AWS_TEST_2"
 :dbtype "oracle:sid"
 :separator ";")


(setq lsp-sqls-workspace-config-path nil)
(setq lsp-sqls-connections
      '(((alias . "pg-chengdu") (driver . "postgresql") (dataSourceName . "host=192.168.100.21 port=5432 user=postgres password=etix.com@123 dbname=postgres sslmode=disable"))))

;; (add-hook 'java-ts-mode-hook 'eglot-ensure)
(with-eval-after-load 'eglot
  (add-to-list 'eglot-server-programs
               `(java-ts-mode . ("/home/huang/jdtls/bin/jdtls" :initializationOptions
                              (
                               :settings
                               (
                                :java
                                (
                                 :autobuild (:enabled :json-false)
                                 :configuration (:runtimes [(:name "JavaSE-11" :path "/usr/local/jdk-11.0.21+9" :sources "/usr/local/jdk-11.0.21+9/lib/src.zip" :default t)
                                                            (:name "JavaSE-17" :path "/usr/lib/jvm/java-17-openjdk-amd64")])
                                 )
                                )
                               :bundles ["/home/huang/jdtls/com.microsoft.java.debug.plugin-0.51.1.jar"]
                               )
                              )))
  (add-to-list 'eglot-server-programs `(js-ts-mode . ("typescript-language-server" "--stdio")))

  
  (define-key eglot-mode-map (kbd "s-l r r") 'eglot-rename)
  (define-key eglot-mode-map (kbd "s-l g i") 'eglot-find-implementation)
  (define-key eglot-mode-map (kbd "<M-return>") 'eglot-code-actions)
  (add-hook 'eglot-mode-hook 'company-mode)
  )
(use-package eldoc-box)
(add-hook 'eglot-managed-mode-hook #'eldoc-box-hover-mode t)
;; (load "/home/huang/.emacs.d/elpa/eldoc-posframe.el")
;; (require 'eldoc-posframe)
(use-package dape
  ;; :preface
  ;; By default dape shares the same keybinding prefix as `gud'
  ;; If you do not want to use any prefix, set it to nil.
  ;; (setq dape-key-prefix "\C-x\C-a")

  ;; :hook
  ;; Save breakpoints on quit
  ;; ((kill-emacs . dape-breakpoint-save)
  ;; Load breakpoints on startup
  ;;  (after-init . dape-breakpoint-load))

  ;; :init
  ;; To use window configuration like gud (gdb-mi)
  ;; (setq dape-buffer-window-arrangement 'gud)

  :config
  ;; Info buffers to the right
  (setq dape-buffer-window-arrangement 'right)

  ;; Global bindings for setting breakpoints with mouse
  (dape-breakpoint-global-mode)
  )
(add-to-list 'dape-configs
               `(java-attach
                 modes (java-mode java-ts-mode)
                 fn (lambda (config)
                      (with-current-buffer
                          (find-file-noselect (expand-file-name (plist-get config :program)
                                                                (project-root (project-current))))
                          (thread-first
                            config
                            (plist-put 'hostname "localhost")
                            (plist-put 'port (eglot-execute-command (eglot-current-server)
                                                                    "vscode.java.startDebugSession" nil))
                            )))
                 :program dape-buffer-default
                 :projectName "web-online"
                 :type "java"
                 :request "attach"
                 :hostName "localhost"
                 :port 11550))
(setq message-send-mail-function 'ignore)
(setq rmail-enable nil)
(setq gnus-select-method
      '(nnimap "etixmail"
        (nnimap-address "imap.gmail.com")
        (nnimap-server-port 993)
        (nnimap-stream ssl)
        (nnimap-authinfo-file "~/.authinfo.gpg")))

(setq message-send-mail-function 'smtpmail-send-it
      smtpmail-smtp-server "smtp.gmail.com"  ; replace with your SMTP server
      smtpmail-smtp-service 587                    ; typically 587 for TLS or 465 for SSL, but check with your provider
      smtpmail-stream-type 'starttls               ; 'starttls or 'ssl depending on your server
      smtpmail-default-smtp-server "smtp.gmail.com") ; same as smtpmail-smtp-server
(setq smtpmail-auth-credentials (expand-file-name "~/.authinfo.gpg"))
(setq smtpmail-debug-info t)
(setq smtpmail-debug-verb t)
(use-package helm
  :ensure t
  :init
  (helm-mode 1))
(global-set-key (kbd "C-x C-f") 'helm-find-files)
(global-set-key (kbd "M-x") 'helm-M-x)
(use-package helm-lsp)
(use-package helm-ag)
(use-package helm-xref)
(define-key lsp-mode-map [remap xref-find-apropos] #'helm-lsp-workspace-symbol)
(global-set-key (kbd "C-S-n") 'helm-do-ag-project-root)
(global-set-key (kbd "C-S-i") 'helm-imenu)
(global-set-key (kbd "C-S-s") 'helm-occur)
(global-set-key (kbd "C-c h") 'helm-command-prefix)
;; (add-hook 'java-mode-hook (lambda () (local-set-key (kbd "C-S-o") 'helm-lsp-global-workspace-symbol)))
(defun helm-do-grep-ag-root (arg)
  "Preconfigured `helm' for grepping with AG in `project-root'.
With prefix arg prompt for type if available with your AG
version."
  (interactive "P")
  ;; (require 'helm-files)
  (helm-grep-ag-1
   (expand-file-name
    (project-root
     (project-current t))) arg))

(defalias 'yes-or-no-p 'y-or-n-p)
(put 'narrow-to-region 'disabled nil)
(put 'scroll-left 'disabled nil)
